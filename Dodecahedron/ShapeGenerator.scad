// Auto-generated OpenSCAD file

    inner_points = 10*[[0.6180337298626563, -1.5609538290214546, -0.42597822997814533], [7.73802858806951e-08, -1.0222094171406149, 1.3982445807186372], [1.618034056077642, -0.16270937397933374, 0.59623103994357], [0.9999997310602456, -0.7014536305154738, -1.2279915887806803], [-1.0000000510624558, -1.2279913158853233, 0.701453652057864], [1.0000002689397194, 0.7014533791624705, 1.2279912943429379], [-0.9999997310602436, 0.7014536305154747, 1.2279915887806803], [1.000000051062458, 1.2279913158853242, -0.701453652057864], [-1.0000002689397172, -0.7014533791624696, -1.2279912943429379], [-0.6180337298626543, 1.5609538290214555, 0.42597822997814533], [-7.738028381207386e-08, 1.0222094171406158, -1.3982445807186372], [-1.6180340560776398, 0.1627093739793347, -0.59623103994357], [0.9999999489375068, -1.2279915672383273, 0.7014533576201214], [-0.6180342476371105, -1.5609536736767546, -0.425978048005613], [1.6180339214220893, 0.16270896728163117, -0.5962315163538447], [2.7515252983042934e-07, 0.1702531391567972, 1.7236629219795792], [0.6180342476371125, 1.5609536736767555, 0.425978048005613], [-1.6180339214220871, -0.16270896728163023, 0.5962315163538447], [-2.751525277618081e-07, -0.17025313915679627, -1.7236629219795792], [-0.9999999489375048, 1.2279915672383281, -0.7014533576201214]];

    outer_points = 10*[[-0.5685521372999673, 0.6180345674612486, -1.5148537027035407], [-0.5786225021475664, 1.6180339887497914, 0.21716816354827337], [-1.7320215313963447, 2.2104808258401205e-07, -0.010070490524902498], [-0.5685522926457485, -0.6180334100384619, -1.5148541166077656], [0.5786229088481014, 1.6180339887497914, -0.21716707993294407], [-1.297686287915155, -2.2104808258401205e-07, 1.1471749204706911], [0.5685522926457485, 0.6180334100384619, 1.5148541166077656], [-0.5786229088481014, -1.6180339887497914, 0.21716707993294407], [1.297686287915155, 2.2104808258401205e-07, -1.1471749204706911], [0.5685521372999673, -0.6180345674612486, 1.5148537027035407], [0.5786225021475664, -1.6180339887497914, -0.21716816354827337], [1.7320215313963447, -2.2104808258401205e-07, 0.010070490524902498], [-1.287615671712802, 1.0000003576632468, -0.5848462760700184], [0.5848467366030299, 1.0000003576632468, -1.2876154625345895], [-1.287615923067556, -0.9999996423366253, -0.5848469457811226], [-0.584846485248276, 0.9999996423366253, 1.2876161322456938], [-0.5848467366030299, -1.0000003576632468, 1.2876154625345895], [1.287615923067556, 0.9999996423366253, 0.5848469457811226], [0.584846485248276, -0.9999996423366253, -1.2876161322456938], [1.287615671712802, -1.0000003576632468, 0.5848462760700184]];

    // Convex hull for inner set (I)
    module inner_hull() {
        hull() {
            for (p = inner_points) {
                translate(p) sphere(r=0.1);
            }
        }
    }

    // Convex hull for outer set (O) minus inner hull (O \ I)
    module outer_minus_inner() {
        difference() {
            hull() {
                for (p = outer_points) {
                    translate(p) sphere(r=0.1);
                }
            }
            inner_hull(); // Subtract inner hull
        }
    }

    // Convex hull for outer set (O) minus all translated inner hulls
    module outer_minus_AllTranslationInner() {
        difference() {
            hull() {
                for (p = outer_points) {
                    translate(p) sphere(r=0.1);
                }
            }
            hull() {
                translate([0,0,5]) inner_hull();
                translate([0,0,-5]) inner_hull();
            }; // Subtract translated inner hulls
        }
    }

    // Difference between outer_minus_inner and outer_minus_AllTranslationInner
    module outer_minus_inner_diff() {
        difference() {
            // Outer minus inner
            difference() {
                hull() {
                    for (p = outer_points) {
                        translate(p) sphere(r=0.1);
                    }
                }
                inner_hull();
            }

            // Subtract Outer minus AllTranslationInner
            difference() {
                hull() {
                    for (p = outer_points) {
                        translate(p) sphere(r=0.1);
                    }
                }
                hull() {
                    translate([0,0,5]) inner_hull();
                    translate([0,0,-5]) inner_hull();
                };
            }
        }
    }

    // Rendering all with colors applied
    // color([1, 0, 0, 0.5]) inner_hull(); // Transparent red
    // color([0, 1, 0, 1]) outer_minus_AllTranslationInner(); // Opaque green
    color([1, 1, 0, 1]) outer_minus_inner_diff(); // Opaque yellow
    